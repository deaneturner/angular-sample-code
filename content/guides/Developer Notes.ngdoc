@ngdoc overview
@name Developer Notes
@description


#Developer Notes

---

## Installation and Build

See the README.md file located a the root of this project for details instructions on both development and production builds.

## Development Workflow

This project built using a combination technologies: Node.js, Git, SASS, Yeoman, Grunt, and Bower.


- Compile Sass into CSS and generate necessary files.  This will load the resultant main.css file in the styles directory.
The dev task will also generate the documentation.

        > grunt dev

    Note: compass:dev will need to be run after modifying SASS or CSS files, as well as running the production build.


- Start the grunt server for Tomcat.  (Alternatively, start the watch task to monitor changes e.g. grunt watch)

        > grunt serve

    The grunt server allows dynamic changes to occur without refreshing the browser - using a Tomcat server (html, js, sass)


- Monitor the server or watch task, as it is important for the following reasons:

    JSHint compliance - Code consistency and accuracy is a prerequisite for the production build (the build will not proceed successfully
     without a successful JSHint task).  Also, it supports code consistency and good level of language compliance.  The watch task will run JSHint for
     each JavaScript file change.

    Dynamic Compass / SASS compilation - The watch task will recompile and load the main.css file when relevant files change.

    Test Execution - The watch task will run unit tests when relevant files change.


- Periodically run the production build to assure that code minification is working properly.

    AngularJS is susceptible to breaking when minified (see relevant material on AngularJS minification).  Verification requires
    the opening of the distribution's index.html file in a browser and inspecting the console for JavaScript load errors.


##Compass / SASS and CSS

To generate the main.css file for development:

    > grunt compass:dev
or

    > grunt dev

##JSHint

To run JSHint on the source code:

    > grunt jshint

##Documentation

Documentation will be generated into a docs directory under the project root via these tasks.

    > grunt dev
or

    > grunt serve


## Exception Handling

Global exception handling addresses XHR failures.  It notifies the user via a
<a href="index.html#/api/common.i18nNotifications:i18nNotifications">i18nNotifications</a> service and logging to console.

**Developers are not required to write failure code for XHR callbacks.**

For a full description of this feature see:

  - The <a href="index.html#/tutorial/Exception%20Handling">Exception Handling</a> guide
  - The <a href="index.html#/api/common.exceptionHandler:exceptionHandler">exceptionHandler</a> interceptor.

## Notifications

###Custom Notifications can be triggered on the UI for various levels of severity.

For toastr integrations, the levels of severity match those of the API e.g. warning, success, etc.


 For a message key:

      "schedule.errors.list.wrong.company": "Wrong company for carrier list. Company Id: {{id}}",

 In JavaScript

      i18nNotifications.pushForCurrentRoute('schedule.errors.list.wrong.company', 'warning', {id: 123}, {});

 or

      i18nNotifications.notify('schedule.errors.list.wrong.company', 'warning', {id: 123}, {});

###Notifications Related to XHR Fatal and Non-fatal errors.

   Notifications related to fatal and non-fatal errors are seamlessly handled by the
   <a href="index.html#/api/common.exceptionHandler:exceptionHandler">exceptionHandler</a> interceptor.

###For a full description of these features see:

- The <a href="index.html#/tutorial/Notifications">Notifications</a> guide

## Locales

Locales keys are based on Structure, Feature, and Function .

- The <a href="index.html#/tutorial/Locales">Locales</a> guide

##User Profile

The user profile is stored on the $rootScope for easy access.

     {{user.info.companyName}}

 or

      $rootScope.user.info.companyName