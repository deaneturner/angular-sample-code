@ngdoc overview
@name Exception Handling
@description

#Exception Handling

---
##Enabling Exception Handling

 - Include the proper top-level, application, module dependency.  In most cases, common.exceptionHandler will provide
 an all encompassing dependency for the localization and notification modules.

        angular.module('ccApp', [
                ...
                'common.exceptionHandler'

##Usage
Provides a global, default, error handler for XHR calls.

The primary purpose of global exception handler is to:

 - Alleviate the need to write failure callbacks for XHR calls.  It will notify the user and log the error.

 - Automatically notify users of non-fatal errors, by reading the response errors parameter.

 - Allow explicit throwing of exceptions that notify the user of the fatal error.

 - Allow explicit notification for non-fatal errors using a notification service.

 - Integrates with external tools or native AnglularJS templates to display notifications.

##Alleviates the need to write failure callbacks for XHR calls.  It will notify the user and log the error.

**Fatal Errors**

The <a href="index.html#/api/common.exceptionHandler:exceptionHandler">exceptionHandler</a> interceptor will both notify the user of a
fatal error via the UI, and log the error to the console.

No failure callback is necessary:

     hrp.getlist().
       success(function(data) {
         $scope.carrierSelector = data.file_list;
       });

Messages are predefined according to HTTP status code:

     case 401:
         msgKey = 'errors.authentication';
     case 403:
         msgKey = 'errors.authentication';
     case 500:
         msgKey = 'errors.server';
     default:
         msgKey = 'errors.error';

See the The <a href="index.html#/api/common.i18nNotifications:i18nNotifications">i18nNotifications</a>  service for details regarding UI notification.

##Will automatically notify users of non-fatal errors.  It reads the XHR response errors parameter.

**Non-fatal Errors**

The <a href="index.html#/api/common.exceptionHandler:exceptionHandler">exceptionHandler</a> interceptor will also handle non-fatal errors by inspecting the errors parameter for notification objects.

An XHR response errors parameter can contain one or many notification object, and it uses the
{@link common.i18nNotifications:i18nNotifications i18nNotifications} service notification objects to provide
translation and string parameter replacement.

     {"errors": {"msgKey":"schedule.errors.list.is.incomplete"}

     {"errors": [{"msgKey":"schedule.errors.list.is.incomplete","params":{"id":123}},{"msgKey":"schedule.errors.list.wrong.company","params":{"id":123}}]

##Allows explicit throwing of exceptions that notify the user of the fatal error.

Throw an exception object that will both notify the user of a fatal error via the UI, and log the error to the console.

Note: For non-fatal notifications use the <a href="index.html#/api/common.i18nNotifications:i18nNotifications">i18nNotifications</a> service.  This service
provides the means to alter the message type e.g. warning, success, etc.

 For the message key:

     "errors.fatal.error": "Error: An unrecoverable error has occurred - {{time}}."

 In JavaScript:

     throw {
          msgKey: 'errors.fatal.error'
          params: {
             time: moment().format('h:mm:ss a')
         },
     }

#Allows explicit notification for non-fatal errors using a notification service.

See the <a href="index.html#/api/common.i18nNotifications:i18nNotifications">i18nNotifications</a> service.

#Integrates with external tools or native AnglularJS templates to display notifications.

See the <a href="index.html#/api/common.i18nNotifications:i18nNotifications">i18nNotifications</a> service.

Watching the notifications length of the notifications array presents many options for displaying notifications.

    Toastr Integration

    $scope.$watch('notifications.getCurrent().length', function() {
        var curNotifications = $scope.notifications.getCurrent();
        if(curNotifications.length > 0) {
            angular.forEach(curNotifications, function(value){
                toastr[value.type](value.message);
            });
        }
    });

OR

    AngularJS Templates

    <div ng-class="['alert', 'alert-'+notification.type]" ng-repeat="notification in notifications.getCurrent()">
        <button class="close" ng-click="removeNotification(notification)">x</button>
        {{notification.message}}
    </div>